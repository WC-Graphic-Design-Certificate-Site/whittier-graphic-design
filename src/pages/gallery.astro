---
import Layout from "../layouts/Layout.astro";
import SiteHeader from "../components/SiteHeader.astro";
import SiteFooter from "../components/SiteFooter.astro";
import ProjectGrid from "../components/ProjectGrid.astro";
// import { getCourses } from "../utils/sanity.js";
import { urlFor } from "../utils/sanity";
import BackToTop from "../components/Svelte/BackToTop.svelte";
import { getCurrentPage } from "../data/pages";
import { projectsGallery } from "../data/projects";

import Button from "../components/Button.astro";

const getImageHeight = (width, aspectRatio) => {
  return Math.floor(width / aspectRatio);
};

const projects = projectsGallery.entries;

const currentPage = getCurrentPage("ad6f6c22-027d-479a-9747-48f42028feb8");
const { title, slug, seo } = currentPage;
---

<Layout title={seo.title} metaDescription={seo.description}>
  <SiteHeader slot="header" />
  <main slot="main" class="content-wrapper">
    <h1 class="title header">{title}</h1>
    <div id="content"><ProjectGrid projects={projects} /></div>

    <!-- <div class="project-grid">
      {
        projects.map((project) => (
          <article class="relative grid-item">
            <div class="grid-text flow">
              <h3>{project.name}</h3>
              <div class="spacer" />
              <p>{project.description}</p>
            </div>
            <img
              src={urlFor(project.image).width(1200).format("webp").url()}
              alt={project.name}
              width={1200}
              height={getImageHeight(
                1200,
                project.image.metadata.dimensions.aspectRatio
              )}
              data-aspectRatio={project.image.metadata.dimensions.aspectRatio}
            />
          </article>
        ))
      }
    </div> -->
    <div id="scroll-to-top" class="hide">
      <Button href="#">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
          <path
            d="M267.3 395.3c-6.2 6.2-16.4 6.2-22.6 0l-192-192c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L256 361.4 436.7 180.7c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6l-192 192z"
          ></path></svg
        >
        <span class="sr-only">Scroll to top</span>
      </Button>
    </div>
    <!-- <BackToTop client:only track={"content"} /> -->
  </main>
  <SiteFooter slot="footer" />
</Layout>
<!-- <InnerPage>
  <InnerHero slot="hero" title="Gallery" />
  <div slot="content" class="">
    <ProjectGrid projects={projects} />
  </div>
</InnerPage> -->

<style>
  .content-wrapper {
    overflow-y: hidden;
  }

  .title {
    position: absolute;
    top: -12px;
    z-index: 5;
    font-family: var(--font-emphasis);
    font-size: var(--step-10);
    color: var(--color-neutral-light);
    line-height: 1;
    letter-spacing: 1rem;
    text-transform: uppercase;
    padding-inline: 0;
  }

  .project-grid {
    position: relative;
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    margin-bottom: var(--space-3xl);
  }

  .project-grid > * {
    overflow: hidden;
  }

  .project-grid > :nth-child(1) {
    grid-column: span 5;
  }

  .project-grid > :nth-child(2n - 4) {
    grid-column: span 2;
  }

  /* can't add xn - x until there are 2 of each in the grid */
  .project-grid > :nth-child(3) {
    grid-column: span 3;
  }

  .project-grid > :nth-child(3) img {
    object-fit: cover;
    height: 100%;
  }

  .project-grid > :nth-child(4) {
    grid-column: span 3;
  }

  .project-grid > :nth-child(4) img {
    object-fit: cover;
    height: 100%;
  }

  .project-grid > :nth-child(5) {
    grid-column: span 2;
  }

  .grid-item {
  }

  .grid-item img {
  }

  .grid-text {
    position: absolute;
    inset: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 10%;
    opacity: 0;
    transform: translateY(1rem);
    text-align: center;
    color: var(--color-neutral-light);
    z-index: 2;
    transition: all 0.4s ease;
    transition-delay: 0.1s;
  }

  .grid-text h3 {
    font-family: var(--font-secondary);
    font-size: var(--step-1);
    text-transform: uppercase;
    letter-spacing: 0.2rem;
  }

  .overlay {
    position: absolute;
    z-index: 1;
    inset: 0;
    background: var(--color-brand-primary);
    mix-blend-mode: multiply;
    opacity: 0;
    transition: all 0.3s ease;
  }

  img {
    transition: all 0.5s ease;
  }

  .spacer {
    height: 3px;
    width: 3rem;
    background: var(--color-brand-primary-light);
    margin-inline: auto;
  }

  .grid-item:hover .grid-text {
    opacity: 1;
    transform: translate(0);
  }

  .grid-item:hover .overlay {
    opacity: 1;
  }

  .grid-item:hover img {
    transform: scale(1.05);
    filter: saturate(0);
    opacity: 0.4;
  }

  #scroll-to-top {
    position: fixed;
    z-index: 50;
    bottom: 2rem;
    right: 2rem;
  }

  .hide {
    opacity: 0;
  }

  #scroll-to-top svg {
    fill: var(--color-neutral-light);
    width: 2rem;
    transform: rotate(180deg);
  }

  @media (max-width: 1024px) {
    .project-grid {
      grid-template-columns: repeat(2, 1fr) !important;
    }

    .project-grid > * {
      grid-column: span 1 !important;
    }

    .project-grid > :nth-child(1) {
      grid-column: span 2 !important;
    }

    .title {
      font-size: var(--step-8);
    }
  }

  @media (max-width: 768px) {
    /* .title {
      font-size: var(--step-8);
      letter-spacing: 0.75rem;
    } */
  }

  @media (max-width: 640px) {
    .title {
      letter-spacing: 0.5rem;

      font-size: var(--step-7);
    }
    /* .title {
      font-size: var(--step-6);
      letter-spacing: 0.4rem;
    } */

    .project-grid {
      grid-template-columns: repeat(1, 1fr) !important;
    }

    .project-grid > :nth-child(1) {
      grid-column: span 1 !important;
    }
  }

  @media (max-width: 480px) {
    .title {
      font-size: var(--step-6);
    }
  }
</style>

<script>
  const scrollBtn = document.getElementById("scroll-to-top");
  const watch = document.getElementById("content");

  function intersectionHandler(entries) {
    entries[0].intersectionRatio > 0.3
      ? console.log("intersecting")
      : // scrollBtn.classList.remove("hide")
        console.log("not intersecting");
    // scrollBtn.classList.add("hide");
    // entries.forEach((entry) => {
    //   if (entry.isIntersecting) {
    //     scrollBtn.classList.remove("hide");
    //   } else {
    //     scrollBtn.classList.add("hide");
    //   }
    // });
  }
  const observer = new IntersectionObserver(intersectionHandler);
  observer.observe(watch);
</script>
